export declare const noticesTypeDefs = "#graphql\n  type Notice {\n    nid: Int!\n    title: String!\n    orgName: String!\n    region: String!\n    detailUrl: String!\n    category: String\n    registration: String\n    postedAt: String!\n  }\n\n  type NoticeStatistics {\n    orgName: String!\n    postedAt: String!\n    category: String\n    region: String\n  }\n\n  type NoticeRegionStatistics {\n    region: String!\n    noticeCount: Int!\n  }\n\n  extend type Query {\n    noticesAll(gap: Int): [Notice!]!\n    noticesByCategory(category: String!, gap: Int): [Notice!]!\n    noticesStatistics(gap: Int): [NoticeStatistics]!\n    noticesRegionStatistics(gap: Int): [NoticeRegionStatistics]!\n    noticesSearch(\n      keywords: String!\n      nots: String!\n      minPoint: Float!\n      addWhere: String\n    ): [Notice]\n    noticesOne(orgName: String!, field: String): String\n  }\n\n  extend type Mutation {\n    noticesUpsert(data: [NoticeInput!]!): Boolean\n    noticesUpdateToProgress(nids: [Int!]!): UpdateResult!\n    noticesUpdateCategory(nids: [Int!]!, category: String!): UpdateResult!\n    noticesExclude(nids: [Int!]!): UpdateResult!\n    noticesRestore(nids: [Int!]!): UpdateResult!\n  }\n\n  input NoticeInput {\n    nid: Int\n    title: String\n    orgName: String\n    region: String\n    detailUrl: String\n    category: String\n    registration: String\n    postedAt: String\n  }\n\n  type UpdateResult {\n    success: Boolean!\n    message: String\n  }\n";
//# sourceMappingURL=notices.d.ts.map